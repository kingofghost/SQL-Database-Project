CREATE TABLE CUSTOMERS (
CUST_ID NUMBER(10) NOT NULL,
CUST_FNAME VARCHAR2(30) NULL,
CUST_LNAME VARCHAR2(30) NULL,
CUST_TEL NUMBER(10) NULL,
PRIMARY KEY(CUST_ID)
);


CREATE TABLE MANAGERS (
MANAGER_EMP_ID NUMBER(10) NOT NULL,
MANAGER_FNAME VARCHAR2(30) NULL,
MANAGER_LNAME VARCHAR2(30) NULL,
PRIMARY KEY(MANAGER_EMP_ID)
);


CREATE TABLE JOBS (
JOB_ID NUMBER(10) NOT NULL,
JOB_TITLE VARCHAR2(30) NULL,
JOB_SALARY FLOAT(10) NULL,
PRIMARY KEY(JOB_ID)
);


CREATE TABLE EMPLOYEES (
EMP_ID NUMBER(10) NOT NULL,
EMP_FNAME VARCHAR2(30) NULL,
EMP_LNAME VARCHAR2(30) NULL,
EMP_TEL NUMBER(10) NULL,
JOB_ID NUMBER(10) NULL,
MANAGER_EMP_ID NUMBER(10) NULL,
PRIMARY KEY(EMP_ID),
FOREIGN KEY(MANAGER_EMP_ID) 
REFERENCES MANAGERS(MANAGER_EMP_ID),
FOREIGN KEY(JOB_ID)
REFERENCES JOBS(JOB_ID)
);


CREATE TABLE DEPARTMENTS (
DEPT_ID NUMBER(10) NOT NULL,
DEPT_NAME VARCHAR2(30) NULL,
MANAGER_EMP_ID NUMBER(10) NOT NULL,
PRIMARY KEY(DEPT_ID),
FOREIGN KEY(MANAGER_EMP_ID) 
REFERENCES MANAGERS(MANAGER_EMP_ID)
);


CREATE TABLE ORDERS (
ORDER_ID NUMBER(10) NOT NULL,
ORDER_DATE DATE NULL,
CUST_ID NUMBER(10) NOT NULL,
EMP_ID NUMBER(10) NOT NULL,
PRIMARY KEY(ORDER_ID),
FOREIGN KEY(CUST_ID) 
REFERENCES CUSTOMERS(CUST_ID),
FOREIGN KEY(EMP_ID) 
REFERENCES EMPLOYEES(EMP_ID)
);


CREATE TABLE TRANSACTIONS (
ORDER_ID NUMBER(10) NOT NULL,
PROD_ID NUMBER(10) NOT NULL,
PROD_QUANTITY NUMBER(10) NULL,
PRIMARY KEY(ORDER_ID,PROD_ID)
);


CREATE TABLE CATEGORIES (
CAT_ID NUMBER(10) NOT NULL,
CAT_NAME VARCHAR2(30) NULL,
PRIMARY KEY(CAT_ID)
);


CREATE TABLE WHOLESALERS (
WHOLESALER_ID NUMBER(10) NOT NULL,
WHOLESALER_NAME VARCHAR2(30) NULL,
PRIMARY KEY(WHOLESALER_ID)
);


CREATE TABLE PRODUCTS (
PROD_ID NUMBER(10) NOT NULL,
PROD_NAME VARCHAR2(30) NULL,
CAT_ID NUMBER(10) NOT NULL,
WHOLESALER_ID NUMBER(10) NOT NULL,
PROD_COST FLOAT(10) NULL,
PROD_SALE_PRICE FLOAT(10) NULL
PRIMARY KEY(PROD_ID),
FOREIGN KEY(CAT_ID) 
REFERENCES CATEGORIES(CAT_ID),  
FOREIGN KEY(WHOLESALER_ID) 
REFERENCES WHOLESALERS(WHOLESALER_ID)
);






INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (1, 'MING', 'LI', 1001);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (2, 'DAN', 'WANG', 1002);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (3, 'YING', 'YAO', 1003);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (4, 'ZI', 'ZHAO', 1004);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (5, 'BIN', 'SUN', 1005);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (6, 'YAO', 'FU', 1006);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (7, 'JING', 'LI', 1007);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (8, 'YI', 'ZHOU', 1008);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (9, 'YUE', 'WU', 1009);
INSERT INTO CUSTOMERS (CUST_ID, CUST_FNAME, CUST_LNAME, CUST_TEL) VALUES (10, 'KUN', 'CHEN', 1010);

INSERT INTO MANAGERS (MANAGER_EMP_ID, MANAGER_FNAME, MANAGER_LNAME) VALUES (1, 'JINCHEN', 'YAO');
INSERT INTO MANAGERS (MANAGER_EMP_ID, MANAGER_FNAME, MANAGER_LNAME) VALUES (2, 'TIAN', 'HUANG');
INSERT INTO MANAGERS (MANAGER_EMP_ID, MANAGER_FNAME, MANAGER_LNAME) VALUES (6, 'SHI', 'ZI');
INSERT INTO MANAGERS (MANAGER_EMP_ID, MANAGER_FNAME, MANAGER_LNAME) VALUES (9, 'MING', 'XIAO');

INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (1, 'GENERAL MANAGER', 70000);
INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (2, 'COMPUTER ENGINEER', 60000);
INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (3, 'SALES OFFICER', 50000);
INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (4, 'MARKETING OFFICER', 50000);
INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (5, 'SECURITY OFFICER', 50000);
INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (6, 'ACCOUNTANT', 55000);
INSERT INTO JOBS (JOB_ID, JOB_TITLE, JOB_SALARY) VALUES (7, 'QUANT', 90000);

INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (1, 'JINCHEN', 'YAO', 2001, 1, 1);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (2, 'TIAN', 'HUANG', 2002, 2, 2);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (3, 'MENG', 'LU', 2003, 2, 2);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (4, 'WANG', 'BA', 2004, 3, 2);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (5, 'LAO', 'HU', 2005, 3, 2);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (6, 'SHI', 'ZI', 2006, 4, 6);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (7, 'LING', 'YANG', 2007, 4, 6);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (8, 'LU', 'JIE', 2008, 5, 6);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (9, 'MING', 'XIAO', 2009, 6, 9);
INSERT INTO EMPLOYEES (EMP_ID, EMP_FNAME, EMP_LNAME, EMP_TEL, JOB_ID, MANAGER_EMP_ID) VALUES (10, 'HAN', 'HAN', 2010, 6, 9);

INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME, MANAGER_EMP_ID) VALUES (1, 'SALES', 2);
INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME, MANAGER_EMP_ID) VALUES (2, 'MARKETING', 2);
INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME, MANAGER_EMP_ID) VALUES (3, 'TECHNICAL', 6);
INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME, MANAGER_EMP_ID) VALUES (4, 'INFORMATION', 6);
INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME, MANAGER_EMP_ID) VALUES (5, 'ACCOUNT', 9);

INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (1, TO_DATE('01/01/2015','dd/mm/yyyy'), 1, 1);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (2, TO_DATE('02/01/2015','dd/mm/yyyy'), 2, 2);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (3, TO_DATE('03/01/2015','dd/mm/yyyy'), 3, 3);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (4, TO_DATE('04/01/2015','dd/mm/yyyy'), 4, 4);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (5, TO_DATE('05/01/2015','dd/mm/yyyy'), 5, 5);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (6, TO_DATE('06/01/2015','dd/mm/yyyy'), 6, 6);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (7, TO_DATE('07/01/2015','dd/mm/yyyy'), 1, 5);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (8, TO_DATE('08/01/2015','dd/mm/yyyy'), 2, 7);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (9, TO_DATE('09/01/2015','dd/mm/yyyy'), 7, 10);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (10, TO_DATE('10/01/2015','dd/mm/yyyy'), 8, 8);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (11, TO_DATE('11/01/2015','dd/mm/yyyy'), 9, 3);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (12, TO_DATE('12/01/2015','dd/mm/yyyy'), 9, 9);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (13, TO_DATE('13/01/2015','dd/mm/yyyy'), 10, 10);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (14, TO_DATE('14/01/2015','dd/mm/yyyy'), 10, 9);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (15, TO_DATE('15/01/2015','dd/mm/yyyy'), 9, 5);

INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (1, 1, 1);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (2, 1, 2);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (3, 2, 2);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (4, 3, 3);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (5, 3, 4);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (6, 4, 5);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (7, 5, 2);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (8, 5, 1);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (9, 6, 2);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (10, 7, 3);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (11, 8, 9);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (12, 9, 1);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (13, 9, 8);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (14, 10, 9);
INSERT INTO TRANSACTIONS (ORDER_ID, PROD_ID, PROD_QUANTITY) VALUES (15, 10, 3);

INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (1, 'MOBILE');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (2, 'TV ENTERTAINMENT');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (3, 'DIGITAL CAMERA');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (4, 'LAPTOP');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (5, 'DESKTOP');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (6, 'SOFTWARE');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (7, 'TABLET');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (8, 'ROUTER');
INSERT INTO CATEGORIES (CAT_ID, CAT_NAME) VALUES (9, 'WATCH');

INSERT INTO WHOLESALERS (WHOLESALER_ID, WHOLESALER_NAME) VALUES (1, 'SONY');
INSERT INTO WHOLESALERS (WHOLESALER_ID, WHOLESALER_NAME) VALUES (2, 'SAMSUNG');
INSERT INTO WHOLESALERS (WHOLESALER_ID, WHOLESALER_NAME) VALUES (3, 'CANON');
INSERT INTO WHOLESALERS (WHOLESALER_ID, WHOLESALER_NAME) VALUES (4, 'MICROSOFT');
INSERT INTO WHOLESALERS (WHOLESALER_ID, WHOLESALER_NAME) VALUES (5, 'APPLE');
INSERT INTO WHOLESALERS (WHOLESALER_ID, WHOLESALER_NAME) VALUES (6, 'CISCO');

INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (1, 'SONY X1', 1, 1, 300, 350);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (2, 'SONY PS4', 2, 1, 400, 500);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (3, 'SAMSUNG', 1, 2, 350, 400);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (4, 'SONY A5', 3, 1, 800, 1000);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (5, 'CANON 5D', 3, 3, 1000, 1200);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (6, 'SURFACE PRO3', 4, 4, 900, 1050);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (7, 'MAC G5', 5, 5, 1600, 1800);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (8, 'VISUAL STUDIO', 6, 4, 200, 250);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (9, 'IPAD', 7, 5, 400, 450);
INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (10, 'CISCO 2811', 8, 6, 700, 800);


/* 4 INNER JOIN queries with descriptions */

/* INNER JOIN 1: List of each employee's name alongside their manager */

SELECT	E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME,
		M.MANAGER_FNAME,
		M.MANAGER_LNAME
FROM	EMPLOYEES E
	INNER JOIN	MANAGERS M
		ON	E.MANAGER_EMP_ID = M.MANAGER_EMP_ID
ORDER BY	E.MANAGER_EMP_ID;


/* INNER JOIN 2: List of each customer's name alongside the employee they make orders with */

SELECT	C.CUST_ID,
		C.CUST_FNAME,
		C.CUST_LNAME,
		C.CUST_TEL,
		O.EMP_ID
FROM    CUSTOMERS C
	INNER JOIN	ORDERS O
		ON 	C.CUST_ID = O.CUST_ID
ORDER BY	C.CUST_ID	DESC;


/* INNER JOIN 3: List of each department alongside the manager of the department. */

SELECT	E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME,
		D.DEPT_NAME
FROM 	EMPLOYEES E
	INNER JOIN	DEPARTMENTS D
		ON 	E.EMP_ID = D.MANAGER_EMP_ID
ORDER BY	D.DEPT_NAME;


/* INNER JOIN 4: List of each order id, starting with most recent order, alongside any product and quantities in each order. The total product price in each order is shown which is the quantity multiplied by the product sale price. */

SELECT	T.ORDER_ID,
		T.PROD_ID,
		T.PROD_QUANTITY,
		P.PROD_SALE_PRICE,
		P.PROD_NAME,
		P.PROD_SALE_PRICE*T.PROD_QUANTITY AS TOTAL_PROD_PRICE
FROM	TRANSACTIONS T
	INNER JOIN	PRODUCTS P
		ON	T.PROD_ID = P.PROD_ID
ORDER BY	T.ORDER_ID	DESC;


/*  6 OUTER JOIN (2xleft,2xfull,2xright) queries with descriptions  */

/* LEFT OUTER JOIN 1: Show employee id, firstname, lastname and the department that they are the manager of. Also show employee's who are not managers. */

SELECT	D.DEPT_ID,
		D.DEPT_NAME,
		E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME
FROM	EMPLOYEES E
	LEFT OUTER JOIN	DEPARTMENTS D
		ON	D.MANAGER_EMP_ID = E.EMP_ID
ORDER BY	E.EMP_ID;


/* LEFT OUTER JOIN 2: Show all customers id, firstname, lastname, order id, date including customers who haven't ordered anything yet. Show orders based on most recent order. */

SELECT	C.CUST_ID,
		C.CUST_FNAME,
		C.CUST_LNAME, 
		O.ORDER_ID,
		O.ORDER_DATE
FROM	CUSTOMERS 	C
	LEFT OUTER JOIN	ORDERS 	O
		ON	C.CUST_ID = O.CUST_ID
ORDER BY	C.CUST_ID;


/* RIGHT OUTER JOIN 1: Show employee id, firstname, lastname and the orders that they were involved with. Also show employee's who have not been involved with an order. */

SELECT	E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME,
		O.ORDER_ID
FROM	ORDERS O
	RIGHT OUTER JOIN	EMPLOYEES	E
		ON	O.EMP_ID = E.EMP_ID
ORDER BY E.EMP_ID;


/* RIGHT OUTER JOIN 2: Display all orders, the quantities of products that have been ordered in that order and the product ID and name. Also show products that have never been ordered. */

SELECT	T.ORDER_ID,
		T.PROD_QUANTITY,
		P.PROD_ID,
		P.PROD_NAME
FROM	TRANSACTIONS T
	RIGHT OUTER JOIN	PRODUCTS P
		ON	P.PROD_ID = T.PROD_ID
ORDER BY	T.ORDER_ID;


/* FULL OUTER JOIN 1: Show all product names and product cateogries. Show products that have not been assigned a category. */

SELECT	C.CAT_ID,
		C.CAT_NAME,
		P.PROD_ID,
		P.PROD_NAME
FROM	CATEGORIES	C
	FULL OUTER JOIN	PRODUCTS	P
		ON	C.CAT_ID = P.CAT_ID;


/* FULL OUTER JOIN 2: Display all job and employees. Show jobs that have no employees assigned to them and show all employees even if they have no job assigned to them. Because every employee is required to be assigned a job when being entered into the database, so all employees will be shown alongside their job and there will be no employees without a job. */

SELECT	E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME,
		J.JOB_ID,
		J.JOB_TITLE,
		J.JOB_SALARY
FROM	EMPLOYEES	E
	LEFT OUTER JOIN	JOBS 	J
		ON	E.JOB_ID = J.JOB_ID;


/* 1 CUBE query (with at least 2 columns) */

/* Show each order ID, Product ID, the sum of each order and the sum of all orders of a particular product to show which product is selling the most. Also output total sales. */

SELECT 	O.ORDER_ID,
		T.PROD_ID,
		SUM(T.SALE_PRICE * T.PROD_QUANTITY) AS TOTAL
FROM ORDERS O
	JOIN TRANSACTIONS T
		ON O.ORDER_ID=T.ORDER_ID
GROUP BY CUBE(O.ORDER_ID, T.PROD_ID);


/*  5 examples of subqueries  */

/* Sub-query 1: Show the employees who are have the lowest salary. */

SELECT	E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME,
		J.JOB_TITLE,
		J.JOB_SALARY
FROM	EMPLOYEES 	E
	JOIN JOBS 	J
		ON 	E.JOB_ID = J.JOB_ID
	WHERE JOB_SALARY = (SELECT MIN(JOB_SALARY) FROM JOBS);


/* Sub-query 2: Show employees who are on a salary that is more than the average wage in the company. */

SELECT	E.EMP_ID,
		E.EMP_FNAME,
		E.EMP_LNAME,
		J.JOB_TITLE,
		J.JOB_SALARY
FROM	EMPLOYEES 	E
	JOIN JOBS 	J
		ON 	E.JOB_ID = J.JOB_ID
	WHERE J.JOB_SALARY >= (SELECT AVG(JOB_SALARY) FROM JOBS);


/* Sub-query 3:  Show job that has highest salary in the company. */

SELECT	JOB_TITLE,
		JOB_SALARY
FROM	JOBS
	WHERE 	JOB_SALARY = (SELECT MAX(JOB_SALARY) FROM JOBS);


/* Sub-query 4:	Show the max sale price of all products. */
SELECT	T.ORDER_ID,
		T.PROD_ID,
		T.PROD_QUANTITY,
		P.PROD_SALE_PRICE
FROM	TRANSACTIONS T
	JOIN PRODUCTS 	P
		ON 	P.PROD_ID = T.PROD_ID
	WHERE	P.PROD_SALE_PRICE = (SELECT MAX(PROD_SALE_PRICE) FROM PRODUCTS);


/* Sub-query 5: Find the product that mskes the most money for the shop.  */

SELECT	P.PROD_ID,
		P.PROD_NAME,
		C.CAT_NAME,
		P.PROD_COST,
		P.PROD_SALE_PRICE,
		P.PROD_SALE_PRICE-P.PROD_COST AS PROD_PROFIT
FROM	PRODUCTS P
	JOIN	CATEGORIES C
		ON	P.CAT_ID = C.CAT_ID
WHERE (P.PROD_SALE_PRICE-P.PROD_COST) = (SELECT MAX(PROD_SALE_PRICE-PROD_COST) FROM PRODUCTS);




/* 5 PL/SQL procedures as part of one package. One procedure must demonstrate each of the following:
• The use of a cursor
• The use of save points
• The use of a rollback
*/

--CREATE THE PACKAGE
CREATE OR REPLACE PACKAGE QUESTION_6 AS
	PROCEDURE JOB_SALARY;
	PROCEDURE GetProductDetails(input_id IN NUMBER);
	PROCEDURE Compare2Products (input1 IN NUMBER, input2 IN NUMBER);
	PROCEDURE GetOrderDetails (input_id IN NUMBER);
	PROCEDURE GetCustomerDetails (input_id IN NUMBER);
END;
/

--CREATE THE BODY OF THE PACKAGE
CREATE OR REPLACE PACKAGE BODY QUESTION_6 AS
/*PL/SQL Procedure 1 (with cursor): If any job is assigned a salary of less than 20,000, an application error will be raised while if any employee has a salary greater than 100,000, an exception will be raised. */
PROCEDURE JOB_SALARY
IS
	/* declare cursor, %rowtype and exception */
	CURSOR cur_job IS
		SELECT * FROM JOBS;
		v_job_row cur_job%ROWTYPE;
		SALARYTOOHIGH EXCEPTION;
BEGIN
	OPEN cur_job;
		FETCH cur_job INTO v_job_row;			
			WHILE cur_job%FOUND LOOP
				IF v_job_row.JOB_SALARY < 20000 THEN
					/* raise error if < 20000 */
					RAISE_APPLICATION_ERROR(-20111, 'An employee has a yearly salary of less than 20000');
				END IF;				
				IF v_job_row.job_salary > 100000 THEN
					/* raise exception if > 100000 */
					RAISE SALARYTOOHIGH; 
				END IF;
 			END LOOP;
	CLOSE cur_job;
/* define exception */
EXCEPTION
	WHEN SALARYTOOHIGH THEN
		DBMS_OUTPUT.PUT_LINE('Job ID / Name: ' || v_job_row.JOB_ID || ' / ' || v_job_row.JOB_TITLE || ' exceeds business rules with salary of: ' || v_job_row.JOB_SALARY);
END JOB_SALARY;
/

/* update employee salary to 19000 */

UPDATE JOBS SET JOB_SALARY=19000 WHERE JOB_ID=7;
BEGIN
	JOB_SALARY();
END;
/




/*PL/SQL Procedure 2: Display a products details when its ID is entered in as an input parameter. Output the name, category, cost and sale price of the product. */

CREATE OR REPLACE PROCEDURE GetProductDetails (input_id IN NUMBER)
IS
	product_id NUMBER := input_id;
	ProdID NUMBER;
	ProdName VARCHAR2(30);
	CatName VARCHAR2(30);
	ProdCost FLOAT(30);
	ProdSalePrice FLOAT(30);
	ProdNonExistant EXCEPTION;

BEGIN
	SELECT	PROD_NAME
	INTO 	ProdName
	FROM	PRODUCTS
	WHERE	PROD_ID = product_id;
	
	SELECT	C.CAT_NAME
	INTO 	CatName
	FROM	PRODUCTS P
		JOIN CATEGORIES C
			ON P.CAT_ID = C.CAT_ID
	WHERE	P.PROD_ID = product_id;
	
	SELECT	PROD_COST
	INTO 	ProdCost
	FROM	PRODUCTS
	WHERE	PROD_ID = product_id;

	SELECT	PROD_SALE_PRICE
	INTO 	ProdSalePrice
	FROM	PRODUCTS
	WHERE	PROD_ID = product_id;

	DBMS_OUTPUT.PUT_LINE('Product Name: ' || ProdName || '.');
	DBMS_OUTPUT.PUT_LINE('Category Name: ' || CatName || '.');
	DBMS_OUTPUT.PUT_LINE('Product Cost: ' || ProdCost || ' euros.');
	DBMS_OUTPUT.PUT_LINE('Product SALE PRICE: ' || ProdSalePrice || ' euros.');

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE: This Product ID does not exist in our database.');
		
END GetProductDetails;
/

BEGIN
	GetProductDetails(10);
END;
/

BEGIN
	GetProductDetails(99);
END;
/




/* PL/SQL Procedure 3: Compare 2 products side by side and show price difference. Use previously created procedure within this procedure. */

CREATE OR REPLACE PROCEDURE Compare2Products (input1 IN NUMBER, input2 IN NUMBER)
IS
	input_1 NUMBER := input1;
	input_2 NUMBER := input2;
	ProdSalePrice1 NUMBER;
	ProdSalePrice2 NUMBER;
	Difference NUMBER;

BEGIN
	DBMS_OUTPUT.PUT_LINE('The details of product one are as follows:');
	GetProductDetails(input_1);
	DBMS_OUTPUT.PUT_LINE('The details of product two are as follows:');
	GetProductDetails(input_2);

	SELECT	PROD_SALE_PRICE
	INTO 	ProdSalePrice1
	FROM	PRODUCTS
	WHERE	PROD_ID = input_1;

	SELECT	PROD_SALE_PRICE
	INTO 	ProdSalePrice2
	FROM	PRODUCTS
	WHERE	PROD_ID = input_2;
	
	SELECT	ProdSalePrice1-ProdSalePrice2
	INTO	Difference
	FROM	DUAL;
	
	/* note that Answer may contain a minus if product two is more than product one */
	DBMS_OUTPUT.PUT_LINE('The difference in price between the two products is: ' || Difference || ' euros.');
	
END Compare2Products;
/

BEGIN
	Compare2Products(9, 5);
END;
/




/* PL/SQL Procedure 4: Show full order details when order ID is entered. */

CREATE OR REPLACE PROCEDURE GetOrderDetails (input_id IN NUMBER)
IS
	OrderID NUMBER := input_id;
	OrderDate VARCHAR2(15);
	CustID NUMBER;
	CustFName VARCHAR2(25);
	CustLName VARCHAR2(25);
	CustTel VARCHAR2(15);
	EmpFName VARCHAR2(25);
	EmpLName VARCHAR2(25);

BEGIN
	SELECT	ORDER_DATE
	INTO 	OrderDate
	FROM	ORDERS
	WHERE	ORDER_ID = OrderID;

	SELECT	C.CUST_ID
	INTO 	CustID
	FROM	CUSTOMERS C
		JOIN ORDERS O
			ON C.CUST_ID=O.CUST_ID
	WHERE	ORDER_ID = OrderID;

	SELECT	C.CUST_FNAME
	INTO 	CustFName
	FROM	CUSTOMERS C
		JOIN ORDERS O
			ON C.CUST_ID=O.CUST_ID
	WHERE	ORDER_ID = OrderID;

	SELECT	C.CUST_LNAME
	INTO 	CustLName
	FROM	CUSTOMERS C
		JOIN ORDERS O
			ON C.CUST_ID=O.CUST_ID
	WHERE	ORDER_ID = OrderID;

	SELECT	C.CUST_TEL
	INTO 	CustTel
	FROM	CUSTOMERS C
		JOIN ORDERS O
			ON C.CUST_ID=O.CUST_ID
	WHERE	ORDER_ID = OrderID;

	SELECT	E.EMP_FNAME
	INTO	EmpFName
	FROM	EMPLOYEES E
		JOIN ORDERS O
			ON E.EMP_ID=O.EMP_ID
	WHERE	ORDER_ID = OrderID;
	
	SELECT	E.EMP_LNAME
	INTO	EmpLName
	FROM	EMPLOYEES E
		JOIN ORDERS O
			ON E.EMP_ID=O.EMP_ID
	WHERE	ORDER_ID = OrderID;

	DBMS_OUTPUT.PUT_LINE('Order Date: ' || OrderDate);
	DBMS_OUTPUT.PUT_LINE('Customer ID: ' || CustID);
	DBMS_OUTPUT.PUT_LINE('Customer Name: ' || CustFName || ' ' || CustLName);
	DBMS_OUTPUT.PUT_LINE('Customer Telephone Number: ' || CustTel);
	DBMS_OUTPUT.PUT_LINE('Employee In Charge: ' || EmpFName || ' ' || EmpLName);

END GetOrderDetails;
/

BEGIN
	GetOrderDetails(5);
END;
/



/* PL/SQL Procedure 5: Get customer details when a Customer's ID is entered. It will display any orders ID's associated with that customer.(with savepoint and rollback) */

CREATE OR REPLACE PROCEDURE GetCustomerDetails(input_id IN NUMBER)
IS
	CustID NUMBER := input_id;
	CustFName VARCHAR2(30);
	CustLName VARCHAR2(30);
	CustTel VARCHAR2(30);
BEGIN
	SAVEPOINT save_1;
	SELECT	CUST_FNAME
	INTO 	CustFName
	FROM	CUSTOMERS
	WHERE	CustID = CUST_ID;

	SELECT	CUST_LNAME
	INTO 	CustLName
	FROM	CUSTOMERS
	WHERE	CustID = CUST_ID;
	
	SELECT	CUST_TEL
	INTO 	CustTel
	FROM	CUSTOMERS
	WHERE	CustID = CUST_ID;

	DBMS_OUTPUT.PUT_LINE('Customer Name: ' || CustFName || ' ' || CustLName);
	DBMS_OUTPUT.PUT_LINE('Customer Phone Number: ' || CustTel);
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE: This Customer ID does not exist in our database.');
		ROLLBACK TO save_1;
END GetCustomerDetails;
/

BEGIN
	GetCustomerDetails(3);
END;
/

BEGIN
	GetCustomerDetails(11);
END;
/



/*  2 PL/SQL function  */

/* 1 PL/SQL function: Allow user to input Order ID, then output the total order cost of that product. */

CREATE OR REPLACE FUNCTION TotalOrderCost(input_id IN NUMBER)
RETURN NUMBER
IS
	given_id NUMBER := input_id;
	PROD_ID NUMBER;
	total_order_cost NUMBER := 0;
BEGIN
	/* select sum of order */
	SELECT	PROD_SALE_PRICE*PROD_QUANTITY
	INTO	total_order_cost 
	FROM	TRANSACTIONS T
		JOIN PRODUCTS P
			ON T.PROD_ID = P.PROD_ID
	WHERE	ORDER_ID = given_id;

	RETURN total_order_cost;
END TotalOrderCost;
/

SELECT TotalOrderCost(9) FROM DUAL;
SELECT TotalOrderCost(1) FROM DUAL;



/* 2 PL/SQL function: Allow user to input Order ID, then output the total profit of that product. */

CREATE OR REPLACE FUNCTION TotalProfit(input_id NUMBER)
RETURN NUMBER
IS
	given_id NUMBER :=input_id;
	PROD_ID NUMBER;
	total_profit NUMBER := 0;
BEGIN
	SELECT 	(PROD_SALE_PRICE-PROD_COST)*PROD_QUANTITY
	INTO 	total_profit
	FROM	TRANSACTIONS T
		JOIN PRODUCTS P
			ON 	T.PROD_ID = P.PROD_ID
	WHERE	ORDER_ID = given_id;

	RETURN 	total_profit;
END TotalProfit;
/

SELECT TotalProfit(9) FROM DUAL;

/* 3 Triggers (at least 1 before, and at least 1 after) */

/* Trigger 1 (before): If no order date has been entered into the order table, automatically gendererate this based on the current date and insert that. */

CREATE OR REPLACE TRIGGER TRIG1_ORDERS
    BEFORE INSERT ON ORDERS
    FOR EACH ROW
BEGIN
	IF :NEW.ORDER_DATE IS NULL THEN
    	SELECT TO_DATE (CURRENT_DATE, 'dd/mm/yyyy') INTO :NEW.ORDER_DATE FROM DUAL;
    END IF;
END;​
/

INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUST_ID, EMP_ID) VALUES (16, NULL, 9, 3);
SELECT * FROM ORDERS;

/* Trigger 2 (before): If no sale price has been entered into the database, generate it by multiplying the wholesale price by 1.25. */

CREATE OR REPLACE TRIGGER TRIG2_PRODUCTS
BEFORE INSERT ON PRODUCTS
FOR EACH ROW
BEGIN
	IF :NEW.PROD_SALE_PRICE IS NULL THEN
		SELECT :NEW.PROD_COST*1.25 INTO :NEW.PROD_SALE_PRICE FROM DUAL;
	END IF;
END;
/

INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (11,'SONY Z4', 1, 1, 500, NULL);
SELECT * FROM PRODUCTS WHERE PROD_NAME='SONY Z4';


/* Trigger 3 (after): If a value is entered into the sale price column which is less than 10% more than what the wholesale price of that item is, then notift the user after it has been input into the database. */

CREATE OR REPLACE TRIGGER TRIG3_PRODUCTS
	AFTER INSERT ON PRODUCTS
	FOR EACH ROW
BEGIN
	IF :NEW.PROD_SALE_PRICE <= :NEW.PROD_COST*1.1 THEN
		DBMS_OUTPUT.PUT_LINE('The sale price of this product is less than 10% more than the wholesale price. The saleprice you entered was ' || :NEW.PROD_SALE_PRICE || ' while the wholesale price was ' || :NEW.PROD_COST || '. Note that this is against company policy.');
	END IF;
END;
/

INSERT INTO PRODUCTS (PROD_ID, PROD_NAME, CAT_ID, WHOLESALER_ID, PROD_COST, PROD_SALE_PRICE) VALUES (12,'SONY VAIO', 4, 1, 500, 505);
SELECT * FROM PRODUCTS WHERE PROD_NAME='SONY VAIO';


